/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0
 */
import { customFetch } from './custom-fetch';
export type TasksControllerFilterParams = {
statusId?: number;
};

export interface UpdateTaskRequest {
  description: string;
  end_date: string;
  id: number;
  name: string;
  start_date: string;
  statusId: number;
}

export interface TaskStatusModel {
  id: number;
  name: string;
}

export interface UserModel {
  email: string;
  id: number;
  name: string;
  password: string;
}

export interface TaskModel {
  description: string;
  end_date: string;
  id: number;
  name: string;
  start_date: string;
  status: TaskStatusModel;
  user: UserModel;
}

export interface CreateTaskRequest {
  description: string;
  end_date: string;
  name: string;
  start_date: string;
  statusId: number;
}

export interface SignUpRequest {
  email: string;
  name: string;
}

export interface SignInResponse {
  accessToken: string;
  email: string;
  name: string;
}

export interface SignInRequest {
  email: string;
  password: string;
}



export type usersControllerSignInResponse = {
  data: SignInResponse;
  status: number;
  headers: Headers;
}

export const getUsersControllerSignInUrl = () => {


  return `/users/sign-in`
}

export const usersControllerSignIn = async (signInRequest: SignInRequest, options?: RequestInit): Promise<usersControllerSignInResponse> => {
  
  return customFetch<Promise<usersControllerSignInResponse>>(getUsersControllerSignInUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      signInRequest,)
  }
);}



export type usersControllerSignUpResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getUsersControllerSignUpUrl = () => {


  return `/users/sign-up`
}

export const usersControllerSignUp = async (signUpRequest: SignUpRequest, options?: RequestInit): Promise<usersControllerSignUpResponse> => {
  
  return customFetch<Promise<usersControllerSignUpResponse>>(getUsersControllerSignUpUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      signUpRequest,)
  }
);}



export type tasksControllerCreateResponse = {
  data: TaskModel;
  status: number;
  headers: Headers;
}

export const getTasksControllerCreateUrl = () => {


  return `/tasks`
}

export const tasksControllerCreate = async (createTaskRequest: CreateTaskRequest, options?: RequestInit): Promise<tasksControllerCreateResponse> => {
  
  return customFetch<Promise<tasksControllerCreateResponse>>(getTasksControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createTaskRequest,)
  }
);}



export type tasksControllerUpdateResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getTasksControllerUpdateUrl = () => {


  return `/tasks`
}

export const tasksControllerUpdate = async (updateTaskRequest: UpdateTaskRequest, options?: RequestInit): Promise<tasksControllerUpdateResponse> => {
  
  return customFetch<Promise<tasksControllerUpdateResponse>>(getTasksControllerUpdateUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateTaskRequest,)
  }
);}



export type tasksControllerFilterResponse = {
  data: TaskModel[];
  status: number;
  headers: Headers;
}

export const getTasksControllerFilterUrl = (params?: TasksControllerFilterParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/tasks?${normalizedParams.toString()}` : `/tasks`
}

export const tasksControllerFilter = async (params?: TasksControllerFilterParams, options?: RequestInit): Promise<tasksControllerFilterResponse> => {
  
  return customFetch<Promise<tasksControllerFilterResponse>>(getTasksControllerFilterUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type tasksControllerDeleteResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getTasksControllerDeleteUrl = (taskId: number,) => {


  return `/tasks/${taskId}`
}

export const tasksControllerDelete = async (taskId: number, options?: RequestInit): Promise<tasksControllerDeleteResponse> => {
  
  return customFetch<Promise<tasksControllerDeleteResponse>>(getTasksControllerDeleteUrl(taskId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



export type tasksControllerListStatusesResponse = {
  data: TaskStatusModel[];
  status: number;
  headers: Headers;
}

export const getTasksControllerListStatusesUrl = () => {


  return `/tasks/status`
}

export const tasksControllerListStatuses = async ( options?: RequestInit): Promise<tasksControllerListStatusesResponse> => {
  
  return customFetch<Promise<tasksControllerListStatusesResponse>>(getTasksControllerListStatusesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



